#Задание 1 (Импортировать NumPy под именем np)
import numpy as np

#=====================================

#Задание 2 (Напечатать версию и конфигурацию)
def zadanie2():
    print(np.__version__)
    np.show_config()

#=====================================

#Задание 3 (Создать вектор (одномерный массив) размера 10, заполненный нулями)
def zadanie3():
    Z = np.zeros(10) #zeros возвращает новый массив укзанной формы и типа, заполненный нулями
    print(Z)

#=====================================

#Задание 4 (Создать вектор размера 10, заполненный единицами)
def zadanie4():
    Z = np.ones(10) #ones возвращает новый массив укзанной формы и типа, заполненный 1
    print(Z)

#=====================================

#Задание 5 (Создать вектор размера 10, заполненный числом 2.5)
def zadanie5():
    Z = np.full(10, 2.5) #full возвращает массив указанной формы и типа, с указанным значением
    print(Z)

#=====================================

#Задание 6 (Как получить документацию о функции numpy.add из командной строки?)
def zadanie6():
    import numpy; numpy.info(numpy.add)

#=====================================

#Задание 7 (Создать вектор размера 10, заполненный нулями, но пятый элемент равен 1)
def zadanie7():
    Z = np.zeros(10) #zeros возвращает новый массив укзанной формы и типа, заполненный нулями
    Z[4] = 1 #значение 5го элемента
    print(Z)

#=====================================

#Задание 8 (Создать вектор со значениями от 10 до 49)
def zadanie8():
    Z = np.arange(10,50) #arnage возвращает одномерный массив с равномерно разнесенными значениями внутри заданного интервала
    print(Z)

#=====================================

#Задание 9 (Развернуть вектор (первый становится последним))
def zadanie9():
    Z = np.arange(50)
    Z = Z[::-3] #разворачиваем вектор
    print(Z)

#=====================================

#Задание 10 (Создать матрицу (двумерный массив) 3x3 со значениями от 0 до 8)
def zadanie10():
    Z = np.arange(9).reshape(3,3) #reshape изменяет форму массива без изменения его данных
    print(Z)

#=====================================

#Задание 11 (Найти индексы ненулевых элементов в [1,2,0,0,4,0])
def zadanie11():
    nenulevoy = np.nonzero([1,2,0,0,4,0]) #nonzero возвращает индексы ненулевых элементов массива
    print(nenulevoy)

#=====================================

#Задание 12 (Создать 3x3 единичную матрицу)
def zadanie12():
    Z = np.eye(3) #eye возвращает двумерный массив у которого все элементы по диагонали равны 1, а все остальные равны 0
    print(Z)

#=====================================

#Задание 13 (Создать массив 3x3x3 со случайными значениями)
def zadanie13():
    Z = np.random.random((3,3,3)) #random массив случайных значений заданной формы
    print(Z)

#=====================================

#Задание 14 (Создать массив 10x10 со случайными значениями, найти минимум и максимум)
def zadanie14():
    Z = np.random.random((10,10))
    Zmin = Z.min(); Zmax = Z.max() #min max встроенные методы нахождения минимумов и максимумов функции
    print(Zmin, Zmax)

#=====================================

#Задание 15 (Создать случайный вектор размера 30 и найти среднее значение всех элементов)
def zadanie15():
    Z = np.random.random(30)
    sredneeznachenie = Z.mean() #mean встроенные метод нахождения среднего значения
    print(sredneeznachenie)

#=====================================

#Задание 16 (Создать матрицу с 0 внутри, и 1 на границах)
def zadanie16():
    Z = np.ones((10,10)) #ones возвращает новый массив указанной формы и типа, заполненный единицами
    Z[1:-1,1:-1] = 0 #указываем значение каких элементов равны нулю
    print (Z)

#=====================================

#Задание 17 (Выяснить результат следующих выражений)
def zadanie17():
    print (0 * np.nan)
    print (np.nan == np.nan)
    print (np.inf > np.nan)
    print (np.nan - np.nan)

#=====================================

#Задание 18 (Создать 5x5 матрицу с 1,2,3,4 под диагональю)
def zadanie18():
    Z = np.diag(np.arange(1, 5), k=-1) #diag метод который позволяет извлекать диагональ из массива, а так же строить диагональные массивы из одномерных массивов
    print(Z)

#=====================================

#Задание 19 (Создать 8x8 матрицу и заполнить её в шахматном порядке)
def zadanie19():
    Z = np.zeros((8,8), dtype=int) #zeros возвращает новый массив укзанной формы и типа, заполненный нулями
    Z[1::2,::2] = 1 #заполнение 2 4 6 8 строки
    Z[::2,1::2] = 1 #заполнение 1 3 5 7 9 строки
    print(Z)

#=====================================

#Задание 20 (Дан массив размерности (6,7,8). Каков индекс (x,y,z) сотого элемента?)
def zadanie20():
    print(np.unravel_index(100, (6,7,8))) #unravel_index преобразует плоский массив индексов в кортеж массивов индексов

#=====================================

#Задание 21 (Создать 8x8 матрицу и заполнить её в шахматном порядке, используя функцию tile)
def zadanie21():
    Z = np.tile(np.array([[0,1],[1,0]]), (4,4)) #title создает массив повторением указанного массива a заданным количеством раз.
    print(Z)

#=====================================


for i in range(666):
    nomer_zadaniya = input('Введи номер задания (например zadanie21):\n\n')
    if nomer_zadaniya == 'zadanie2':
        zadanie2()
    if nomer_zadaniya == 'zadanie3':
        zadanie3()
    if nomer_zadaniya == 'zadanie4':
        zadanie4()
    if nomer_zadaniya == 'zadanie5':
        zadanie5()
    if nomer_zadaniya == 'zadanie6':
        zadanie6()
    if nomer_zadaniya == 'zadanie7':
        zadanie7()
    if nomer_zadaniya == 'zadanie8':
        zadanie8()
    if nomer_zadaniya == 'zadanie9':
        zadanie9()
    if nomer_zadaniya == 'zadanie10':
        zadanie10()
    if nomer_zadaniya == 'zadanie11':
        zadanie11()
    if nomer_zadaniya == 'zadanie12':
        zadanie12()
    if nomer_zadaniya == 'zadanie13':
        zadanie13()
    if nomer_zadaniya == 'zadanie14':
        zadanie14()
    if nomer_zadaniya == 'zadanie15':
        zadanie15()
    if nomer_zadaniya == 'zadanie16':
        zadanie16()
    if nomer_zadaniya == 'zadanie17':
        zadanie17()
    if nomer_zadaniya == 'zadanie18':
        zadanie18()
    if nomer_zadaniya == 'zadanie19':
        zadanie19()
    if nomer_zadaniya == 'zadanie20':
        zadanie20()
    if nomer_zadaniya == 'zadanie21':
        zadanie21()
    elif nomer_zadaniya == 'quit':
        break
